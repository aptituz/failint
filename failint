#!/usr/bin/perl

# License: GNU GPL version 2 or greater
# Copyright: 2011 Patrick Schoenfeld <patrick.schoenfeld@googlemail.com>


use strict;
use warnings;

use Getopt::Long;
use File::Basename qw(basename);

use Failint::Log;

my $debug = 0;
my $info = 0;
my $verbose = 0;
my $progname = basename($0);
my $default_checkdir = "/usr/share/failint/checks";
my $checkdir = (-d $default_checkdir) ? $default_checkdir : "checks/";

GetOptions (
    "debug" => \$debug,
    "info" => \$info,
    "verbose|v" => \$verbose
);

Failint::Log::Configure(debug => $debug);
Failint::Log::Configure(info => $info);
my $config_path = shift @ARGV || "/srv/fai/config";

sub run_checks {
    my ($warnings, $errors, $infos) = (0, 0, 0);

    for my $check (sort(glob($checkdir . "*"))) {
        next if (not -x $check);
        debug("Running $check\n");
        open(my $check_fh, "-|", $check, $config_path) or
            die "unable to fork subprocess: $!";

        while (my $line = <$check_fh>) {
            chomp $line;
            debug("Output: " . $line);
            if ($line =~ /^W\|(.*)\|(.*)\|(.*)/) {
               my (undef, $file, $lineno, $text) = split(/\|/, $line);
               warning($file, $lineno, $text);
               $warnings++;
            } elsif ($line =~ /^E\|(.*)\|(.*)\|(.*)/) {
                my (undef, $file, $lineno, $text) = split(/\|/, $line);
                error($file, $lineno, $text);
                $errors++;
            } elsif ($line =~ /^I\|(.*)\|(.*)\|(.*)/) {
                my (undef, $file, $lineno, $text) = split(/\|/, $line);
                info($file, $lineno, $text);
                $infos++;
            } elsif ($line =~ /^D\|(.*)/) {
                my (undef, $message) =  split(/\|/, $line);
                debug($message);
            } else {
                # Ignore other output
                next if not $verbose;
                next if $line =~ /^$/;
                print "# " . $line . "\n";
            }
        }
    }
    print "Found $errors error(s), $warnings warning(s) and $infos info(s)\n";
    print "Infos has been suppressed." if not $info and $infos;
}

run_checks;

