#!/usr/bin/perl

# License: GNU GPL version 2 or greater
# Copyright: 2011 Patrick Schoenfeld <patrick.schoenfeld@googlemail.com>


use strict;
use warnings;

use Getopt::Long;
use File::Basename qw(basename);

use Failint::Log;
use Failint::Parser;

Getopt::Long::Configure ("bundling");

my $debug = 0;
my $info = 0;
my $verbose = 0;
my $progname = basename($0);
my $default_checkdir = "/usr/share/failint/checks";
my $checkdir = (-d $default_checkdir) ? $default_checkdir : "checks/";

GetOptions (
    "debug|d+" => \$debug,
    "info" => \$info,
    "verbose|v" => \$verbose
);

Failint::Log::Configure(debug_lvl => $debug, info => $info);
my $config_path = shift @ARGV || "/srv/fai/config";

sub run_checks {
    my ($warnings, $errors, $infos) = (0, 0, 0);

    for my $check (sort(glob($checkdir . "*"))) {
        next if (not -x $check);
        debug("Running $check", 1);
        open(my $check_fh, "-|", $check, $config_path) or
            die "unable to fork subprocess: $!";

        my $n=0;
        while (my $line = <$check_fh>) {
            $n++;
            chomp $line;
            my ($tag, $file, $lineno, $message, $level) =
                Failint::Parser::parse_line($line);

            debug("<$check>|:$n $line", 3); 
            if (defined($tag) and $tag eq "E") {
                error($file, $lineno, $message);
                $errors++;
            } elsif (defined($tag) and $tag eq "W") {
                warning($file, $lineno, $message);
                $warnings++;
            } elsif (defined($tag) and $tag eq "I") {
                info($file, $lineno, $message);
                $infos++;
            } elsif (defined($tag) and $tag eq "D") {
                debug($message, $level);
            } else {
                next if not $verbose;
                next if $message =~ /^$/;
                print "# " . $message . "\n";
            }
        }
    }
    print "Found $errors error(s), $warnings warning(s) and $infos info(s)\n";
    print "Infos has been suppressed." if not $info and $infos;
}

run_checks;

